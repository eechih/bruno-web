schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  createProduct(input: CreateProductInput!): Product
  deleteProduct(input: DeleteProductInput!): Product
}

type Product {
  cost: Int
  createdAt: AWSDateTime
  description: String
  id: ID!
  images: [String]
  name: String
  offShelfAt: AWSDateTime
  optionGrid: [String]
  owner: String
  price: Int
  provider: String
  publishAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ProductConnection {
  items: [Product]
  nextToken: String
}

type Query {
  getProduct(id: ID!): Product
  listProducts(filter: FilterProductInput, limit: Int, nextToken: String): [Product]
}

input CreateProductInput {
  cost: Int
  description: String
  images: [String]
  name: String!
  offShelfAt: AWSDateTime
  optionGrid: [String]
  price: Int!
  provider: String
  publishAt: AWSDateTime
}

input DeleteProductInput {
  id: ID!
}

input FilterProductInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateProductInput {
  cost: Int
  description: String
  id: ID!
  images: [String]
  name: String
  offShelfAt: AWSDateTime
  optionGrid: [String]
  price: Int
  provider: String
  publishAt: AWSDateTime
}
